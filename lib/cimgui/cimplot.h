//This file is automatically generated by generator.lua from https://github.com/cimgui/cimgui
//based on implot.h file version 0.3 WIP from Dear ImGui https://github.com/ocornut/imgui
#ifndef CIMGUIPLOT_INCLUDED
#define CIMGUIPLOT_INCLUDED
#include <stdio.h>
#include <stdint.h>
#if defined _WIN32 || defined __CYGWIN__
    #ifdef CIMGUI_NO_EXPORT
        #define API
    #else
        #define API __declspec(dllexport)
    #endif
    #ifndef __GNUC__
    #define snprintf sprintf_s
    #endif
#else
    #ifdef __GNUC__
        #define API  __attribute__((__visibility__("default")))
    #else
        #define API
    #endif
#endif

#if defined __cplusplus
    #define EXTERN extern "C"
#else
    #include <stdarg.h>
    #include <stdbool.h>
    #define EXTERN extern
#endif

#define CIMGUI_API EXTERN API
#define CONST const


#ifdef _MSC_VER
typedef unsigned __int64 ImU64;
#else
//typedef unsigned long long ImU64;
#endif


#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef struct ImPlotStyle ImPlotStyle;
typedef struct ImPlotLimits ImPlotLimits;
typedef struct ImPlotRange ImPlotRange;
typedef struct ImPlotPoint ImPlotPoint;

typedef int ImPlotFlags;
typedef int ImPlotAxisFlags;
typedef int ImPlotCol;
typedef int ImPlotStyleVar;
typedef int ImPlotMarker;
typedef int ImPlotColormap;
typedef enum {
    ImPlotFlags_MousePos    = 1 << 0,  // the mouse position, in plot coordinates, will be displayed in the bottom-right
    ImPlotFlags_Legend      = 1 << 1,  // a legend will be displayed in the top-left
    ImPlotFlags_Highlight   = 1 << 2,  // plot items will be highlighted when their legend entry is hovered
    ImPlotFlags_BoxSelect   = 1 << 3,  // the user will be able to box-select with right-mouse
    ImPlotFlags_Query       = 1 << 4,  // the user will be able to draw query rects with middle-mouse
    ImPlotFlags_ContextMenu = 1 << 5,  // the user will be able to open a context menu with double-right click
    ImPlotFlags_Crosshairs  = 1 << 6,  // the default mouse cursor will be replaced with a crosshair when hovered
    ImPlotFlags_AntiAliased = 1 << 7,  // plot lines will be software anti-aliased (not recommended, prefer MSAA)
    ImPlotFlags_NoChild     = 1 << 8,  // a child window region will not be used to capture mouse scroll (can boost performance for single ImGui window applications)
    ImPlotFlags_YAxis2      = 1 << 9,  // enable a 2nd y-axis
    ImPlotFlags_YAxis3      = 1 << 10, // enable a 3rd y-axis
    ImPlotFlags_Default     = ImPlotFlags_MousePos | ImPlotFlags_Legend | ImPlotFlags_Highlight | ImPlotFlags_BoxSelect | ImPlotFlags_ContextMenu
}ImPlotFlags_;
typedef enum {
    ImPlotAxisFlags_GridLines  = 1 << 0, // grid lines will be displayed
    ImPlotAxisFlags_TickMarks  = 1 << 1, // tick marks will be displayed for each grid line
    ImPlotAxisFlags_TickLabels = 1 << 2, // text labels will be displayed for each grid line
    ImPlotAxisFlags_Invert     = 1 << 3, // the axis will be inverted
    ImPlotAxisFlags_LockMin    = 1 << 4, // the axis minimum value will be locked when panning/zooming
    ImPlotAxisFlags_LockMax    = 1 << 5, // the axis maximum value will be locked when panning/zooming
    ImPlotAxisFlags_LogScale   = 1 << 6, // a logartithmic (base 10) axis scale will be used
    ImPlotAxisFlags_Scientific = 1 << 7, // scientific notation will be used for tick labels if displayed (WIP, not very good yet)
    ImPlotAxisFlags_Default    = ImPlotAxisFlags_GridLines | ImPlotAxisFlags_TickMarks | ImPlotAxisFlags_TickLabels,
    ImPlotAxisFlags_Auxiliary  = ImPlotAxisFlags_Default & ~ImPlotAxisFlags_GridLines,
}ImPlotAxisFlags_;
typedef enum {
    ImPlotCol_Line,
    ImPlotCol_Fill,
    ImPlotCol_MarkerOutline,
    ImPlotCol_MarkerFill,
    ImPlotCol_ErrorBar,
    ImPlotCol_FrameBg,
    ImPlotCol_PlotBg,
    ImPlotCol_PlotBorder,
    ImPlotCol_XAxis,
    ImPlotCol_YAxis,
    ImPlotCol_YAxis2,
    ImPlotCol_YAxis3,
    ImPlotCol_Selection,
    ImPlotCol_Query,
    ImPlotCol_COUNT
}ImPlotCol_;
typedef enum {
    ImPlotStyleVar_LineWeight,
    ImPlotStyleVar_Marker,
    ImPlotStyleVar_MarkerSize,
    ImPlotStyleVar_MarkerWeight,
    ImPlotStyleVar_ErrorBarSize,
    ImPlotStyleVar_ErrorBarWeight,
    ImPlotStyleVar_DigitalBitHeight,
    ImPlotStyleVar_DigitalBitGap,
    ImPlotStyleVar_COUNT
}ImPlotStyleVar_;
typedef enum {
    ImPlotMarker_None = 1 << 0,
    ImPlotMarker_Circle = 1 << 1,
    ImPlotMarker_Square = 1 << 2,
    ImPlotMarker_Diamond = 1 << 3,
    ImPlotMarker_Up = 1 << 4,
    ImPlotMarker_Down = 1 << 5,
    ImPlotMarker_Left = 1 << 6,
    ImPlotMarker_Right = 1 << 7,
    ImPlotMarker_Cross = 1 << 8,
    ImPlotMarker_Plus = 1 << 9,
    ImPlotMarker_Asterisk = 1 << 10,
}ImPlotMarker_;
typedef enum {
    ImPlotColormap_Default = 0,
    ImPlotColormap_Dark = 1,
    ImPlotColormap_Pastel = 2,
    ImPlotColormap_Paired = 3,
    ImPlotColormap_Viridis = 4,
    ImPlotColormap_Plasma = 5,
    ImPlotColormap_Hot = 6,
    ImPlotColormap_Cool = 7,
    ImPlotColormap_Pink = 8,
    ImPlotColormap_Jet = 9,
    ImPlotColormap_COUNT
}ImPlotColormap_;
struct ImPlotPoint
{
    double x, y;
};
struct ImPlotRange
{
    double Min, Max;
};
struct ImPlotLimits
{
    ImPlotRange X, Y;
};
struct ImPlotStyle
{
    float LineWeight;
    ImPlotMarker Marker;
    float MarkerSize;
    float MarkerWeight;
    float ErrorBarSize;
    float ErrorBarWeight;
    float DigitalBitHeight;
    float DigitalBitGap;
    ImVec4 Colors[ImPlotCol_COUNT];
};
#else

#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointNil(void);
CIMGUI_API void ImPlotPoint_destroy(ImPlotPoint* self);
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointdouble(double _x,double _y);
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRange(void);
CIMGUI_API void ImPlotRange_destroy(ImPlotRange* self);
CIMGUI_API bool ImPlotRange_Contains(ImPlotRange* self,double value);
CIMGUI_API double ImPlotRange_Size(ImPlotRange* self);
CIMGUI_API ImPlotLimits* ImPlotLimits_ImPlotLimits(void);
CIMGUI_API void ImPlotLimits_destroy(ImPlotLimits* self);
CIMGUI_API bool ImPlotLimits_ContainsPlotPoInt(ImPlotLimits* self,const ImPlotPoint p);
CIMGUI_API bool ImPlotLimits_Containsdouble(ImPlotLimits* self,double x,double y);
CIMGUI_API ImPlotStyle* ImPlotStyle_ImPlotStyle(void);
CIMGUI_API void ImPlotStyle_destroy(ImPlotStyle* self);
CIMGUI_API bool ipBeginPlot(const char* title_id,const char* x_label,const char* y_label,const ImVec2 size,ImPlotFlags flags,ImPlotAxisFlags x_flags,ImPlotAxisFlags y_flags,ImPlotAxisFlags y2_flags,ImPlotAxisFlags y3_flags);
CIMGUI_API void ipEndPlot(void);
CIMGUI_API void ipPlotLineFloatPtrInt(const char* label_id,const float* values,int count,int offset,int stride);
CIMGUI_API void ipPlotLinedoublePtrInt(const char* label_id,const double* values,int count,int offset,int stride);
CIMGUI_API void ipPlotLineFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void ipPlotLinedoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride);
CIMGUI_API void ipPlotLineVec2Ptr(const char* label_id,const ImVec2* data,int count,int offset);
CIMGUI_API void ipPlotLinePlotPoIntPtr(const char* label_id,const ImPlotPoint* data,int count,int offset);
CIMGUI_API void ipPlotLineFnPlotPoIntPtr(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void ipPlotScatterFloatPtrInt(const char* label_id,const float* values,int count,int offset,int stride);
CIMGUI_API void ipPlotScatterdoublePtrInt(const char* label_id,const double* values,int count,int offset,int stride);
CIMGUI_API void ipPlotScatterFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void ipPlotScatterdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride);
CIMGUI_API void ipPlotScatterVec2Ptr(const char* label_id,const ImVec2* data,int count,int offset);
CIMGUI_API void ipPlotScatterPlotPoIntPtr(const char* label_id,const ImPlotPoint* data,int count,int offset);
CIMGUI_API void ipPlotScatterFnPlotPoIntPtr(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void ipPlotBarsFloatPtrIntFloat(const char* label_id,const float* values,int count,float width,float shift,int offset,int stride);
CIMGUI_API void ipPlotBarsdoublePtrIntdouble(const char* label_id,const double* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ipPlotBarsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,float width,int offset,int stride);
CIMGUI_API void ipPlotBarsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double width,int offset,int stride);
CIMGUI_API void ipPlotBarsFnPlotPoIntPtr(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,double width,int offset);
CIMGUI_API void ipPlotBarsHFloatPtrIntFloat(const char* label_id,const float* values,int count,float height,float shift,int offset,int stride);
CIMGUI_API void ipPlotBarsHdoublePtrIntdouble(const char* label_id,const double* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ipPlotBarsHFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,float height,int offset,int stride);
CIMGUI_API void ipPlotBarsHdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double height,int offset,int stride);
CIMGUI_API void ipPlotBarsHFnPlotPoIntPtr(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,double height,int offset);
CIMGUI_API void ipPlotErrorBarsFloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride);
CIMGUI_API void ipPlotErrorBarsdoublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride);
CIMGUI_API void ipPlotErrorBarsFloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride);
CIMGUI_API void ipPlotErrorBarsdoublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride);
CIMGUI_API void ipPlotErrorBarsHFloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride);
CIMGUI_API void ipPlotErrorBarsHdoublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride);
CIMGUI_API void ipPlotErrorBarsHFloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride);
CIMGUI_API void ipPlotErrorBarsHdoublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride);
CIMGUI_API void ipPlotPieChartFloatPtr(const char** label_ids,const float* values,int count,float x,float y,float radius,bool normalize,const char* label_fmt,float angle0);
CIMGUI_API void ipPlotPieChartdoublePtr(const char** label_ids,const double* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ipPlotHeatmapFloatPtr(const char* label_id,const float* values,int rows,int cols,float scale_min,float scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ipPlotHeatmapdoublePtr(const char* label_id,const double* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ipPlotDigitalFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void ipPlotDigitaldoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride);
CIMGUI_API void ipPlotDigitalFnPlotPoIntPtr(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void ipPlotTextFloat(const char* text,float x,float y,bool vertical,const ImVec2 pixel_offset);
CIMGUI_API void ipPlotTextdouble(const char* text,double x,double y,bool vertical,const ImVec2 pixel_offset);
CIMGUI_API bool ipIsPlotHovered(void);
CIMGUI_API void ipGetPlotMousePos(ImPlotPoint *pOut,int y_axis);
CIMGUI_API void ipGetPlotLimits(ImPlotLimits *pOut,int y_axis);
CIMGUI_API bool ipIsPlotQueried(void);
CIMGUI_API void ipGetPlotQuery(ImPlotLimits *pOut,int y_axis);
CIMGUI_API ImPlotStyle* ipGetStyle(void);
CIMGUI_API void ipPushStyleColorU32(ImPlotCol idx,ImU32 col);
CIMGUI_API void ipPushStyleColorVec4(ImPlotCol idx,const ImVec4 col);
CIMGUI_API void ipPopStyleColor(int count);
CIMGUI_API void ipPushStyleVarFloat(ImPlotStyleVar idx,float val);
CIMGUI_API void ipPushStyleVarInt(ImPlotStyleVar idx,int val);
CIMGUI_API void ipPopStyleVar(int count);
CIMGUI_API void ipSetColormapPlotColormap(ImPlotColormap colormap,int samples);
CIMGUI_API void ipSetColormapVec4Ptr(const ImVec4* colors,int num_colors);
CIMGUI_API int ipGetColormapSize(void);
CIMGUI_API void ipGetColormapColor(ImVec4 *pOut,int index);
CIMGUI_API void ipLerpColormap(ImVec4 *pOut,float t);
CIMGUI_API void ipSetNextPlotLimits(double x_min,double x_max,double y_min,double y_max,ImGuiCond cond);
CIMGUI_API void ipSetNextPlotLimitsX(double x_min,double x_max,ImGuiCond cond);
CIMGUI_API void ipSetNextPlotLimitsY(double y_min,double y_max,ImGuiCond cond,int y_axis);
CIMGUI_API void ipSetNextPlotTicksXdoublePtr(const double* values,int n_ticks,const char** labels,bool show_default);
CIMGUI_API void ipSetNextPlotTicksXdouble(double x_min,double x_max,int n_ticks,const char** labels,bool show_default);
CIMGUI_API void ipSetNextPlotTicksYdoublePtr(const double* values,int n_ticks,const char** labels,bool show_default,int y_axis);
CIMGUI_API void ipSetNextPlotTicksYdouble(double y_min,double y_max,int n_ticks,const char** labels,bool show_default,int y_axis);
CIMGUI_API void ipSetPlotYAxis(int y_axis);
CIMGUI_API void ipGetPlotPos(ImVec2 *pOut);
CIMGUI_API void ipGetPlotSize(ImVec2 *pOut);
CIMGUI_API void ipPixelsToPlot(ImPlotPoint *pOut,const ImVec2 pix,int y_axis);
CIMGUI_API void ipPlotToPixels(ImVec2 *pOut,const ImPlotPoint plt,int y_axis);
CIMGUI_API void ipShowColormapScale(double scale_min,double scale_max,float height);
CIMGUI_API void ipPushPlotClipRect(void);
CIMGUI_API void ipPopPlotClipRect(void);
CIMGUI_API void ipShowDemoWindow(bool* p_open);



#endif //CIMGUIPLOT_INCLUDED
